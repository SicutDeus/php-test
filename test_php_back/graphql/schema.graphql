
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

#scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

scalar Date

scalar Upload
@scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(
      order_by: _ @orderBy(columns: ["name", "email", "id"])
      #where: _ @whereConditions(columns: ["name", "email", "id"])
      #name: String @where(operator: "like")
      name: String @customSearch
    #): [User!]! @paginate(defaultCount: 10, maxCount:20,  type: PAGINATOR, builder: "App\\Models\\User@statistics")
    ): [User!]! @paginate(defaultCount: 10, maxCount:20,  type: PAGINATOR, scopes: ["limit"])


    usersAll(
        name: String @where(operator: "like")
        #): [User!]! @paginate(defaultCount: 10, maxCount:20,  type: PAGINATOR, builder: "App\\Models\\User@statistics")
    ): [User!]! @all

    ticket(
    id: ID @eq
    ): Ticket @find

    tickets(name: String @customSearch): [Ticket!] @paginate(defaultCount: 10)

    event(
        id: ID @eq
    ): Event @find

    events: [Event!] @paginate(defaultCount: 10)
    CustomSearchQuery(
        model: String!
        value: String!
        int_value: Int!
    ): [SearchFields!]!

    me: User @auth

}
type SearchFields{
    id: ID!
    name: String!
}

type User {
    id: ID!

    name: String!

    email: String!

    email_verified_at: DateTime

    tickets: [Ticket!] @hasManyThrough

    created_at: DateTime!

    updated_at: DateTime!
}

type DeleteResponse{
    status: String
    message: String
}

type Image{
    id: ID!
    name: String!
    url: String!
    user: User
    created_at: DateTime
    updated_at: DateTime
}

input CreateUserInput{
    name: String!
    email: String
    password: String
}

type Mutation {
  createUser(
      input: CreateUserInput @spread
    ): User!
    deleteUser(id: ID! @whereKey): DeleteResponse
    updateUser(id: ID, email: String, password: String): User @update

    upload(file: Upload!): Image
}

type Event {
    id: ID!
    name: String
    date: Date
}

type Ticket {
    id: ID!
    name: String!
    event: Event!
    user: User!
}
